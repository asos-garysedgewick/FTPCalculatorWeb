@{
    ViewBag.Title = "FTP Calculator";
    var powerValuesJson = ViewBag.PowerValuesJson as string;
    var cadenceValuesJson = ViewBag.CadenceValuesJson as string; // Add this line
    var ftp = ViewBag.Ftp;
}
<h2>FTP Calculator</h2>
<p>Choose your .fit file and press 'Estimate FTP'.</p>
<p><b>Note: </b>There must be at least 1 x 20 minute effort to estimate the FTP.</p>
<form asp-action="Upload" enctype="multipart/form-data" method="post">
    <input type="file" name="fitFile" accept=".fit" />
    <button type="submit">Estimate FTP</button>
</form>
@if (ViewBag.Error != null)
{
    <div style="color:red">@ViewBag.Error</div>
}
@if (powerValuesJson != null)
{
    <p></p>
    <p><b>Estimated FTP:</b> @ftp</p>
    <canvas id="powerChart" width="800" height="400"></canvas>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        const powerValues = @Html.Raw(powerValuesJson);
        const cadenceValues = @Html.Raw(cadenceValuesJson ?? "[]");
        // Pad or trim cadenceValues to match powerValues length
        while (cadenceValues.length < powerValues.length) cadenceValues.push(null);
        if (cadenceValues.length > powerValues.length) cadenceValues.length = powerValues.length;

        const ftpWindow = 20 * 60; // 20 minutes in seconds
        let maxAvg = 0, maxStart = 0;
        for (let i = 0; i <= powerValues.length - ftpWindow; i++) {
            let sum = 0;
            for (let j = 0; j < ftpWindow; j++) sum += powerValues[i + j];
            let avg = sum / ftpWindow;
            if (avg > maxAvg) {
                maxAvg = avg;
                maxStart = i;
            }
        }
        const labels = powerValues.map((_, i) => (i / 60).toFixed(1)); // minutes

        const normalData = powerValues.map((v, i) =>
            (i < maxStart || i >= maxStart + ftpWindow) ? v : null
        );
        const ftpData = powerValues.map((v, i) =>
            (i >= maxStart && i < maxStart + ftpWindow) ? v : null
        );

        const ctx = document.getElementById('powerChart').getContext('2d');
        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [
                    {
                        label: 'Power (Watts)',
                        data: normalData,
                        backgroundColor: 'rgba(54,162,235,0.2)',
                        borderColor: 'rgba(54,162,235,1)',
                        borderWidth: 1,
                        barPercentage: 1.0,
                        categoryPercentage: 1.0,
                        yAxisID: 'y',
                        type: 'bar'
                    },
                    {
                        label: 'FTP 20min Window',
                        data: ftpData,
                        backgroundColor: 'rgba(255,0,0,0.5)',
                        borderColor: 'rgba(255,0,0,1)',
                        borderWidth: 1,
                        barPercentage: 1.0,
                        categoryPercentage: 1.0,
                        yAxisID: 'y',
                        type: 'bar'
                    },
                    {
                        label: 'Cadence (rpm)',
                        data: cadenceValues,
                        borderColor: 'rgba(0,200,0,1)',
                        backgroundColor: 'rgba(0,200,0,0.1)',
                        borderWidth: 2,
                        fill: false,
                        yAxisID: 'y1',
                        type: 'line',
                        pointRadius: 0
                    }
                ]
            },
            options: {
                scales: {
                    x: {
                        title: { display: true, text: 'Time (minutes)' },
                        ticks: { maxTicksLimit: 20 }
                    },
                    y: {
                        title: { display: true, text: 'Power (Watts)' },
                        beginAtZero: true
                    },
                    y1: {
                        title: { display: true, text: 'Cadence (rpm)' },
                        position: 'right',
                        beginAtZero: true,
                        grid: { drawOnChartArea: false }
                    }
                }
            }
        });
    </script>
}