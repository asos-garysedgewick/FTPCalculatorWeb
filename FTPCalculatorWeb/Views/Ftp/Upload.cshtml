@using System.Text.Json
@{
    ViewBag.Title = "FTP Calculator";
    var powerValuesJson = ViewBag.PowerValuesJson as string;
    var cadenceValuesJson = ViewBag.CadenceValuesJson as string;
    var ftp = ViewBag.Ftp;
    // Safely handle null for ViewBag.TimeInZones
    List<double> timeInZones = new();
    if (ViewBag.TimeInZones is string timeInZonesJson && !string.IsNullOrEmpty(timeInZonesJson))
    {
        timeInZones = JsonSerializer.Deserialize<List<double>>(timeInZonesJson);
    }
    else
    {
        // Fallback: 7 zeros for 7 zones
        timeInZones = Enumerable.Repeat(0.0, 7).ToList();
    }
}
<h2>FTP Calculator</h2>
<p>Choose your .fit file and press 'Estimate FTP'.</p>
<p><b>Note: </b>There must be at least 1 x 20 minute effort and Power data to estimate the FTP.</p>
<form asp-action="Upload" enctype="multipart/form-data" method="post">
    <input type="file" name="fitFile" accept=".fit" />
    <button type="submit">Estimate FTP</button>
</form>
@if (ViewBag.Error != null)
{
    <div style="color:red">@ViewBag.Error</div>
}
@if (powerValuesJson != null)
{
    <p></p>
    @if (ViewBag.FtpWindowAverage != null)
    {
        <p><b>Average Power (FTP 20min Window):</b> @ViewBag.FtpWindowAverage Watts</p>
    }
    <p><b>Estimated FTP:</b> @ftp</p>
    @if (ViewBag.AveragePower != null)
    {
        <p><b>Average Power (Full Ride):</b> @ViewBag.AveragePower Watts</p>
    }
    <canvas id="powerChart" width="800" height="400"></canvas>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        const powerValues = @Html.Raw(powerValuesJson);
        const cadenceValues = @Html.Raw(cadenceValuesJson ?? "[]");
        const powerZones = @Html.Raw(ViewBag.PowerZonesJson ?? "[]");
        const zoneColors = [
            'rgba(200,200,200,0.5)', // Zone 1
            'rgba(0,200,0,0.5)',     // Zone 2
            'rgba(0,150,255,0.5)',   // Zone 3
            'rgba(255,255,0,0.5)',   // Zone 4
            'rgba(255,150,0,0.5)',   // Zone 5
            'rgba(255,0,0,0.5)',     // Zone 6
            'rgba(150,0,255,0.5)'    // Zone 7
        ];
        const barColors = powerZones.map(z => zoneColors[z-1]);

        // Pad or trim cadenceValues to match powerValues length
        while (cadenceValues.length < powerValues.length) cadenceValues.push(null);
        if (cadenceValues.length > powerValues.length) cadenceValues.length = powerValues.length;

        const ftpWindow = 20 * 60; // 20 minutes in seconds
        let maxAvg = 0, maxStart = 0;
        for (let i = 0; i <= powerValues.length - ftpWindow; i++) {
            let sum = 0;
            for (let j = 0; j < ftpWindow; j++) sum += powerValues[i + j];
            let avg = sum / ftpWindow;
            if (avg > maxAvg) {
                maxAvg = avg;
                maxStart = i;
            }
        }
        // Pass the FTP window average to the server for display
        fetch('', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ ftpWindowAverage: maxAvg.toFixed(2) })
        });

        const labels = powerValues.map((_, i) => (i / 60).toFixed(1)); // minutes

        const normalData = powerValues.map((v, i) =>
            (i < maxStart || i >= maxStart + ftpWindow) ? v : null
        );
        const ftpData = powerValues.map((v, i) =>
            (i >= maxStart && i < maxStart + ftpWindow) ? v : null
        );

        const ctx = document.getElementById('powerChart').getContext('2d');
        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [
                    {
                        label: 'Power (Watts)',
                        data: normalData,
                        backgroundColor: barColors,
                        borderColor: 'rgba(54,162,235,1)',
                        borderWidth: 1,
                        barPercentage: 1.0,
                        categoryPercentage: 1.0,
                        yAxisID: 'y',
                        type: 'bar'
                    },
                    {
                        label: 'FTP 20min Window',
                        data: ftpData,
                        backgroundColor: 'rgba(255,0,0,0.5)',
                        borderColor: 'rgba(255,0,0,1)',
                        borderWidth: 1,
                        barPercentage: 1.0,
                        categoryPercentage: 1.0,
                        yAxisID: 'y',
                        type: 'bar'
                    },
                    {
                        label: 'Cadence (rpm)',
                        data: cadenceValues,
                        borderColor: 'rgba(0,0,0,1)', // changed from green to black
                        backgroundColor: 'rgba(0,0,0,0.1)', // changed from green to black
                        borderWidth: 2,
                        fill: false,
                        yAxisID: 'y1',
                        type: 'line',
                        pointRadius: 0
                    }
                ]
            },
            options: {
                scales: {
                    x: {
                        title: { display: true, text: 'Time (minutes)' },
                        ticks: { maxTicksLimit: 20 }
                    },
                    y: {
                        title: { display: true, text: 'Power (Watts)' },
                        beginAtZero: true
                    },
                    y1: {
                        title: { display: true, text: 'Cadence (rpm)' },
                        position: 'right',
                        beginAtZero: true,
                        grid: { drawOnChartArea: false }
                    }
                }
            }
        });
    </script>
}
<p></p>
<p></p>
<h3>Time Spent in Each Power Zone (minutes)</h3>
<table class="table table-bordered">
    <thead>
        <tr>
            <th>Zone</th>
            <th>Description</th>
            <th>Time (min)</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>1</td><td>Active Recovery (&lt;55% FTP)</td><td>@timeInZones[0]</td></tr>
        <tr><td>2</td><td>Endurance (55-75% FTP)</td><td>@timeInZones[1]</td></tr>
        <tr><td>3</td><td>Tempo (76-90% FTP)</td><td>@timeInZones[2]</td></tr>
        <tr><td>4</td><td>Lactate Threshold (91-105% FTP)</td><td>@timeInZones[3]</td></tr>
        <tr><td>5</td><td>VO2 Max (106-120% FTP)</td><td>@timeInZones[4]</td></tr>
        <tr><td>6</td><td>Anaerobic Capacity (121-150% FTP)</td><td>@timeInZones[5]</td></tr>
        <tr><td>7</td><td>Neuromuscular Power (&gt;150% FTP)</td><td>@timeInZones[6]</td></tr>
    </tbody>
</table>